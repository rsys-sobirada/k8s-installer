// Jenkinsfile.health â€” run ONLY the k8s health check

pipeline {
  agent any
  options {
    timestamps()
    disableConcurrentBuilds()
  }

  // Minimum env the script needs
  environment {
    SERVER_FILE = 'server_pci_map.txt'                 // adjust if your host list lives elsewhere
    SSH_KEY     = '/var/lib/jenkins/.ssh/jenkins_key'  // path on the Jenkins node
  }

  // Handy knobs (no code changes needed to tune)
  parameters {
    string(name: 'HEALTH_RETRY_WAIT_SECS', defaultValue: '10', description: 'Wait between retries (secs)')
    string(name: 'HEALTH_RETRIES',          defaultValue: '1',   description: 'Number of retries (0 = none)')
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('K8s health check') {
      steps {
        timeout(time: 20, unit: 'MINUTES') {
          sh '''#!/usr/bin/env bash
set -euo pipefail

# Ensure script exists, normalize line endings, and mark executable
test -f scripts/k8s_health_check.sh || { echo "scripts/k8s_health_check.sh not found"; exit 2; }
sed -i 's/\r$//' scripts/k8s_health_check.sh || true
chmod +x scripts/k8s_health_check.sh

# Run the health check (propagates its exit codes 0/1/2/3 to Jenkins)
env \
  SERVER_FILE="${SERVER_FILE}" \
  SSH_KEY="${SSH_KEY}" \
  HEALTH_RETRY_WAIT_SECS="${HEALTH_RETRY_WAIT_SECS}" \
  HEALTH_RETRIES="${HEALTH_RETRIES}" \
bash -euo pipefail scripts/k8s_health_check.sh
'''
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: '**/*.log', allowEmptyArchive: true
    }
  }
}
