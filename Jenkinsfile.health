// Jenkinsfile.health — Health check ➜ PS install (with NEW_BUILD_PATH/NEW_VERSION)

pipeline {
  agent any
  options { timestamps(); disableConcurrentBuilds() }

  environment {
    // Health-check inputs
    SERVER_FILE   = 'server_pci_map.txt'
    SSH_KEY       = '/var/lib/jenkins/.ssh/jenkins_key'

    // PS install script path
    PS_SCRIPT     = 'scripts/ps_config.sh'

    // TEMP defaults (you can later convert these to parameters)
    NEW_BUILD_PATH = '/home/labadmin/6.3.0/EA3/'
    NEW_VERSION    = '6.3.0'
  }

  parameters {
    string(name: 'HEALTH_RETRY_WAIT_SECS', defaultValue: '300', description: 'Wait between retries (secs)')
    string(name: 'HEALTH_RETRIES',          defaultValue: '1',   description: 'Retry count for health check')
    string(name: 'PS_STAGE_TIMEOUT_MIN',    defaultValue: '60',  description: 'Timeout for PS install stage (minutes)')
  }

  stages {
    stage('Checkout') { steps { checkout scm } }

    stage('K8s health check') {
      steps {
        timeout(time: 20, unit: 'MINUTES') {
          sh '''#!/usr/bin/env bash
set -euo pipefail
: "${HEALTH_RETRY_WAIT_SECS:=300}"
: "${HEALTH_RETRIES:=1}"
: "${SERVER_FILE:=server_pci_map.txt}"
: "${SSH_KEY:=/var/lib/jenkins/.ssh/jenkins_key}"

test -f scripts/k8s_health_check.sh || { echo "scripts/k8s_health_check.sh not found"; exit 2; }
sed -i 's/\\r$//' scripts/k8s_health_check.sh || true
chmod +x scripts/k8s_health_check.sh

set -o pipefail
env \
  SERVER_FILE="${SERVER_FILE}" \
  SSH_KEY="${SSH_KEY}" \
  HEALTH_RETRY_WAIT_SECS="${HEALTH_RETRY_WAIT_SECS}" \
  HEALTH_RETRIES="${HEALTH_RETRIES}" \
bash -euo pipefail scripts/k8s_health_check.sh |& tee health_check.log
'''
        }
      }
    }

    stage('PS config & install') {
      steps {
        script {
          def psTimeout = params.PS_STAGE_TIMEOUT_MIN as Integer
          timeout(time: psTimeout, unit: 'MINUTES') {
            sh '''#!/usr/bin/env bash
set -euo pipefail
: "${PS_SCRIPT:=scripts/ps_config.sh}"

# TEMP: ensure these exist even if Jenkins env is missing
: "${NEW_BUILD_PATH:=/home/labadmin/6.3.0/EA3/}"
: "${NEW_VERSION:=6.3.0}"

test -f "${PS_SCRIPT}" || { echo "PS script not found at ${PS_SCRIPT}"; exit 2; }
sed -i 's/\\r$//' "${PS_SCRIPT}" || true
chmod +x "${PS_SCRIPT}"

echo "[pipeline] Running ${PS_SCRIPT} with:"
echo "  NEW_BUILD_PATH=${NEW_BUILD_PATH}"
echo "  NEW_VERSION=${NEW_VERSION}"

set -o pipefail
env \
  SERVER_FILE="${SERVER_FILE}" \
  SSH_KEY="${SSH_KEY}" \
  NEW_BUILD_PATH="${NEW_BUILD_PATH}" \
  NEW_VERSION="${NEW_VERSION}" \
bash -euo pipefail "${PS_SCRIPT}" |& tee ps_config.log
'''
          }
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'health_check.log, ps_config.log', allowEmptyArchive: true
    }
  }
}
