pipeline {
  agent any
  options {
    timestamps()
    timeout(time: 45, unit: 'MINUTES')
  }
  parameters {
    // Optional: leave empty to auto-detect
    string(name: 'NF_SCRIPT', defaultValue: '', description: 'Path to nf_config.sh (leave empty to auto-detect)')

    // Required inputs
    string(name: 'NEW_BUILD_PATH', defaultValue: '/home/labadmin/6.3.0/EA3', description: 'Base path like /home/labadmin/<VER>/<TAG>')
    string(name: 'NEW_VERSION',    defaultValue: '6.3.0_EA3', description: 'Version (tag optional), e.g. 6.3.0_EA3')
    choice(name: 'DEPLOYMENT_TYPE', choices: ['Low','Medium','High'], description: 'Capacity profile')

    // Maps (single file by default)
    string(name: 'SERVER_FILE',         defaultValue: 'server_pci_map.txt', description: 'Hosts list (colon format); field #2 is IP')
    string(name: 'SERVER_PCI_MAP',      defaultValue: 'server_pci_map.txt', description: 'PCI/mode map (same file by default)')
    string(name: 'SERVER_IP_RANGE_MAP', defaultValue: 'server_pci_map.txt', description: 'Per-server N4 base (.0[/mask]); same file by default')

    // SSH + optional overrides
    string(name: 'HOST_USER',    defaultValue: 'root', description: 'SSH username on target hosts')
    string(name: 'SSH_KEY_PATH', defaultValue: '/var/lib/jenkins/.ssh/id_rsa', description: 'Private key path on Jenkins node')
    string(name: 'CN_DEPLOYMENT', defaultValue: '', description: 'VM or SRIOV (leave empty to use map)')
    string(name: 'N3_PCI',        defaultValue: '', description: 'e.g. 0000:08:00.0 (leave empty to use map)')
    string(name: 'N6_PCI',        defaultValue: '', description: 'e.g. 0000:09:00.0 (leave empty to use map)')
  }

  stages {
    stage('Checkout') { steps { checkout scm } }

    stage('Prep') {
      steps {
        sh '''
          #!/bin/sh
          set -eu
          # Fallback to default or auto-discover
          cand="${NF_SCRIPT:-}"; [ -n "$cand" ] || cand="scripts/nf_config.sh"
          if [ -f "$cand" ]; then nf="$cand"; else
            echo "[pipeline] ${cand} not found — searching for nf_config.sh ..."
            nf="$(find . -maxdepth 4 -type f -name nf_config.sh | head -n1 || true)"
            if [ -z "$nf" ]; then
              echo "ERROR: nf_config.sh not found (looked for ${cand})."
              find . -maxdepth 2 -type f | sed "s|^\\./||"
              exit 2
            fi
          fi
          sed -i 's/\\r$//' "$nf" || true
          chmod +x "$nf"
          echo "$nf" > .nf_script_path

          [ -f "${SERVER_FILE}" ]         || echo "[pipeline] WARNING: ${SERVER_FILE} not present in repo"
          [ -f "${SERVER_PCI_MAP}" ]      || echo "[pipeline] WARNING: ${SERVER_PCI_MAP} not present in repo"
          [ -f "${SERVER_IP_RANGE_MAP}" ] || echo "[pipeline] WARNING: ${SERVER_IP_RANGE_MAP} not present in repo"
        '''
      }
    }

    stage('NF services config') {
      steps {
        // IMPORTANT: run under bash explicitly
        sh '''
          bash -lc '
            set -euo pipefail
            if [ ! -f "${SSH_KEY_PATH}" ]; then
              echo "ERROR: SSH key not found at ${SSH_KEY_PATH}"; exit 3; fi

            script="$(cat .nf_script_path)"
            echo "[pipeline] Running ${script} …"
            echo "[pipeline] Using SSH key: ${SSH_KEY_PATH}"

            env \
              SERVER_FILE="${SERVER_FILE}" \
              SSH_KEY="${SSH_KEY_PATH}" \
              NEW_BUILD_PATH="${NEW_BUILD_PATH}" \
              NEW_VERSION="${NEW_VERSION}" \
              DEPLOYMENT_TYPE="${DEPLOYMENT_TYPE}" \
              SERVER_PCI_MAP="${SERVER_PCI_MAP}" \
              SERVER_IP_RANGE_MAP="${SERVER_IP_RANGE_MAP}" \
              HOST_USER="${HOST_USER}" \
              CN_DEPLOYMENT="${CN_DEPLOYMENT}" \
              N3_PCI="${N3_PCI}" \
              N6_PCI="${N6_PCI}" \
            bash -euo pipefail "${script}" 2>&1 | tee nf_config.log

            exit ${PIPESTATUS[0]}
          '
        '''
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'nf_config.log', allowEmptyArchive: true
    }
  }
}
