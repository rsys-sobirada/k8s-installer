pipeline {
  agent any

  options {
    timestamps()
    disableConcurrentBuilds()
    timeout(time: 45, unit: 'MINUTES')
  }

  parameters {
    // NEW_BUILD_PATH should be the tag folder root (e.g., /home/labadmin/EA3)
    string(name: 'NEW_BUILD_PATH', defaultValue: '/home/labadmin/EA3', description: 'Folder containing TRILLIUM_5GCN_CNF_REL_<VER>')
    string(name: 'NEW_VERSION',    defaultValue: '6.3.0_EA3',          description: 'Version tag (e.g., 6.3.0_EA3)')
    string(name: 'SERVER_FILE',    defaultValue: 'server_pci_map.txt', description: 'Map of name:ip')
    string(name: 'HOST_NAME',      defaultValue: '',                   description: 'Optional: pick name from column 1')
    string(name: 'HOST_USER',      defaultValue: 'root',               description: 'SSH user')
    string(name: 'SSH_KEY',        defaultValue: '/var/lib/jenkins/.ssh/jenkins_key', description: 'Private key path')

    // EMS-only readiness controls
    string(name: 'EMS_NAMESPACE',   defaultValue: '',                  description: 'Optional namespace (blank = all namespaces)')
    string(name: 'EMS_SELECTOR',    defaultValue: 'app=ems',           description: 'Label selector for EMS pods')
    string(name: 'EMS_NAME_PREFIX', defaultValue: 'ems',               description: 'Fallback name prefix if selector yields none')
  }

  stages {
    stage('Checkout') { steps { checkout scm } }

    stage('Guard: enforce Option A') {
      steps {
        sh '''
          set -e
          echo "== Enforcing Option A (NO .ems_stage.sh) =="
          if grep -R --line-number "\\.ems_stage\\.sh" .; then
            echo "ERROR: Found references to scripts/.ems_stage.sh. Remove them and use scripts/ems_install_and_check.sh." >&2
            exit 2
          fi
          test -f scripts/ems_install_and_check.sh || { echo "scripts/ems_install_and_check.sh not found" >&2; exit 3; }
        '''
      }
    }

    stage('EMS install & EMS-only health check (remote via SSH)') {
      options { timeout(time: 20, unit: 'MINUTES') }
      steps {
        sh '''
          set -e
          chmod +x scripts/ems_install_and_check.sh

          # Optional proxies
          export http_proxy="${http_proxy:-}"; export https_proxy="${https_proxy:-}"; export no_proxy="${no_proxy:-}"
          export HTTP_PROXY="${HTTP_PROXY:-}"; export HTTPS_PROXY="${HTTPS_PROXY:-}"; export NO_PROXY="${NO_PROXY:-}"

          # Run the repo script that uses nf_config-style SSH and NO profile sourcing
          SERVER_FILE="${SERVER_FILE}" \
          SSH_KEY="${SSH_KEY}" \
          NEW_BUILD_PATH="${NEW_BUILD_PATH}" \
          NEW_VERSION="${NEW_VERSION}" \
          HOST_USER="${HOST_USER}" \
          HOST_NAME="${HOST_NAME}" \
          EMS_NAMESPACE="${EMS_NAMESPACE}" \
          EMS_SELECTOR="${EMS_SELECTOR}" \
          EMS_NAME_PREFIX="${EMS_NAME_PREFIX}" \
          /bin/bash -x scripts/ems_install_and_check.sh
        '''
      }
    }
  }

  post {
    always {
      // Best-effort EMS-only snapshot for logs
      sh '''
        set -e
        if [ -f "${SERVER_FILE:-server_pci_map.txt}" ]; then
          SERVER_IP="$(awk -F: '$0!~/^[[:space:]]*#/ && NF>=2 {print $2; exit}' "${SERVER_FILE:-server_pci_map.txt}")"
          if [ -n "$SERVER_IP" ] && command -v ssh >/dev/null 2>&1; then
            NS_OPT=""
            [ -n "${EMS_NAMESPACE:-}" ] && NS_OPT="-n ${EMS_NAMESPACE}"
            SEL_OPT=""
            [ -n "${EMS_SELECTOR:-}" ] && SEL_OPT="-l ${EMS_SELECTOR}"
            ssh -i "${SSH_KEY:-/var/lib/jenkins/.ssh/jenkins_key}" \
                -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                "${HOST_USER:-root}@${SERVER_IP}" -- "kubectl get pods ${NS_OPT:- -A} ${SEL_OPT} | (grep -i ems || true)" || true
          fi
        fi
      '''.stripIndent()
    }
    failure { echo 'Pipeline failed â€” see the EMS stage for the first non-zero step.' }
  }
}
