pipeline {
  agent any

  options {
    ansiColor('xterm')
    timestamps()
    disableConcurrentBuilds()
    timeout(time: 45, unit: 'MINUTES') // overall guard
  }

  // Only safe, high-level params; nothing from server_pci_map.txt is shown
  parameters {
    string(name: 'NEW_BUILD_PATH', defaultValue: '/home/labadmin', description: 'Base path where releases are staged')
    string(name: 'NEW_VERSION', defaultValue: '6.3.0_EA3', description: 'Version tag like 6.3.0_EA3')
    string(name: 'INSTALL_SERVER_FILE', defaultValue: 'server_pci_map.txt', description: 'Path to server map (not exposed contents)')
    string(name: 'NODE_NAME', defaultValue: '', description: 'Optional: pick a server name from column 1 (blank=first line)')
  }

  environment {
    // Nothing sensitive printed; SERVER_IP is resolved inside the shell step
    KUBECONFIG = "${env.WORKSPACE}/.kube/config" // use your cluster kubeconfig if needed
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    // If you already run NF config elsewhere, keep that stage there.
    // This is just a placeholder showing relative order.
    stage('NF config (placeholder)') {
      steps {
        echo 'NF config was updated earlier in your flow...'
      }
    }

    stage('EMS install & health check') {
      options { timeout(time: 10, unit: 'MINUTES') }
      steps {
        sh label: 'Install EMS + wait ready + probe GUI', script: '''
          set -euo pipefail

          req(){ command -v "$1" >/dev/null 2>&1 || { echo "Missing dependency: $1"; exit 1; }; }
          die(){ echo "❌ $*"; exit 1; }

          : "${NEW_BUILD_PATH:?missing NEW_BUILD_PATH}"
          : "${NEW_VERSION:?missing NEW_VERSION}"
          INSTALL_SERVER_FILE="${INSTALL_SERVER_FILE:-server_pci_map.txt}"
          NODE_NAME="${NODE_NAME:-}"

          req kubectl
          req curl
          req awk
          req grep
          req sed

          echo ">>> Resolving SERVER_IP from ${INSTALL_SERVER_FILE}"
          get_server_ip() {
            local file="$1" name_filter="$2"
            [ -s "$file" ] || die "Server map not found or empty: $file"
            local line
            if [ -n "$name_filter" ]; then
              line="$(awk -F: -v n="$name_filter" \'BEGIN{IGNORECASE=1} $0!~/^[[:space:]]*#/ && NF>=2 && $1==n {print; exit}\' "$file")"
              [ -n "$line" ] || die "No entry for NODE_NAME=\\"$name_filter\\" in $file"
            else
              line="$(awk -F: \'$0!~/^[[:space:]]*#/ && NF>=2 {print; exit}\' "$file")"
            fi
            local ip
            ip="$(awk -F: \'{print $2}\' <<<"$line")"
            [[ "$ip" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]] || die "Invalid IP parsed from: $line"
            printf "%s" "$ip"
          }

          SERVER_IP="$(get_server_ip "$INSTALL_SERVER_FILE" "$NODE_NAME")"
          export SERVER_IP
          EMS_URL="https://${SERVER_IP}.nip.io/ems/register"
          echo ">>> SERVER_IP resolved (hidden from parameters UI)."
          echo ">>> EMS URL for probe: $EMS_URL"

          # Build EMS scripts directory from NEW_VERSION & NEW_BUILD_PATH
          base="${NEW_VERSION%%_*}"         # e.g., 6.3.0
          tag="${NEW_VERSION#*_}"           # e.g., EA3
          [ "$base" != "$NEW_VERSION" ] || die "NEW_VERSION must look like 6.3.0_EA3 (got: $NEW_VERSION)"
          EMS_SCRIPTS_DIR="${NEW_BUILD_PATH}/${tag}/TRILLIUM_5GCN_CNF_REL_${base}/nf-services/scripts"
          [ -d "$EMS_SCRIPTS_DIR" ] || die "EMS scripts dir not found: $EMS_SCRIPTS_DIR"
          echo ">>> Using EMS scripts dir: $EMS_SCRIPTS_DIR"

          echo ">>> Running ./install_ems.sh"
          ( cd "$EMS_SCRIPTS_DIR" && chmod +x install_ems.sh && ./install_ems.sh )

          echo ">>> Waiting up to 180s for EMS pods to be Ready (n/n) and Running…"
          ems_all_ready() {
            local lines ready status r t ok=1
            mapfile -t lines < <(kubectl get pods -A 2>/dev/null | grep -i ems || true)
            ((${#lines[@]})) || return 1
            for l in "${lines[@]}"; do
              ready="$(awk \'{print $3}\' <<<"$l")"
              status="$(awk \'{print $4}\' <<<"$l")"
              case "$ready" in
                */*) r="${ready%/*}"; t="${ready#*/}";;
                *)   r=0; t=1;;
              esac
              if [ "$r" != "$t" ] || [ "$status" != "Running" ]; then
                ok=0; break
              fi
            done
            [ "$ok" -eq 1 ]
          }

          deadline=$(( $(date +%s) + 180 ))
          while :; do
            if ems_all_ready; then
              echo "✅ EMS pods Ready:"
              kubectl get pods -A | grep -i ems || true
              break
            else
              echo "…waiting:"
              kubectl get pods -A | grep -i ems || echo "(no ems pods yet)"
            fi
            [ "$(date +%s)" -lt "$deadline" ] || die "Timeout: EMS pods not Ready within 3 minutes"
            sleep 5
          done

          echo ">>> Short watch (3 snapshots) of 'kubectl get pod -A | grep ems'"
          for i in 1 2 3; do
            echo "--- snapshot $i ---"
            kubectl get pod -A | grep -i ems || true
            sleep 3
          done

          echo ">>> Probing EMS GUI: $EMS_URL"
          code="$(curl -sk -o /dev/null -w '%{http_code}' "$EMS_URL" || true)"
          if [ "$code" = "200" ] || [ "$code" = "302" ]; then
            echo "✅ EMS GUI reachable (HTTP $code) at $EMS_URL"
          else
            die "EMS GUI not reachable (HTTP $code) at $EMS_URL"
          fi

          echo "🎉 EMS install & checks completed."
          echo "👉 GUI registration (manual once):"
          echo "   User ID: root"
          echo "   Name   : root"
          echo "   Password: root123"
        '''
      }
    }
  }

  post {
    always {
      sh '''
        echo "---- EMS pods (final) ----"
        kubectl get pods -A | (grep -i ems || true)
      '''.stripIndent()
      archiveArtifacts artifacts: '**/ems*.log', allowEmptyArchive: true
    }
    failure {
      echo 'Pipeline failed — see console for the first non-zero step that aborted the run.'
    }
  }
}
