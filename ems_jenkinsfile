pipeline {
  agent any

  options {
    timestamps()
    disableConcurrentBuilds()
    timeout(time: 45, unit: 'MINUTES')  // overall guard
  }

  parameters {
    string(name: 'NEW_BUILD_PATH',       defaultValue: '/home/labadmin',                     description: 'Base path where releases are staged')
    string(name: 'NEW_VERSION',          defaultValue: '6.3.0_EA3',                          description: 'Version tag like 6.3.0_EA3')
    string(name: 'INSTALL_SERVER_FILE',  defaultValue: 'server_pci_map.txt',                 description: 'Server map file (contents not exposed)')
    string(name: 'NODE_NAME',            defaultValue: '',                                   description: 'Optional: server name from column 1 (blank=first)')
    string(name: 'SSH_KEY',              defaultValue: '/var/lib/jenkins/.ssh/jenkins_key',  description: 'Private key for remote login (same as nf_config.sh)')
    string(name: 'SSH_USER',             defaultValue: 'root',                               description: 'SSH user (same as nf_config.sh)')
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('EMS install & health check (remote via SSH)') {
      options { timeout(time: 15, unit: 'MINUTES') }
      steps {
        // Ensure the script exists and is executable, then run it with bash
        sh '''
          set -e
          test -f scripts/ems_install_and_check.sh || { echo "scripts/ems_install_and_check.sh not found" >&2; exit 1; }
          chmod +x scripts/ems_install_and_check.sh
          /bin/bash scripts/ems_install_and_check.sh
        '''
      }
    }
  }

  post {
    always {
      // Best-effort remote snapshot of EMS pods for logs
      sh '''
        set -e
        if command -v awk >/dev/null 2>&1 && [ -n "${INSTALL_SERVER_FILE:-}" ] && [ -f "${INSTALL_SERVER_FILE}" ]; then
          SERVER_IP="$(awk -F: '$0!~/^[[:space:]]*#/ && NF>=2 {print $2; exit}' "${INSTALL_SERVER_FILE}")"
          if [ -n "$SERVER_IP" ] && command -v ssh >/dev/null 2>&1; then
            ssh -i "${SSH_KEY:-/var/lib/jenkins/.ssh/jenkins_key}" \
                -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                "${SSH_USER:-root}@${SERVER_IP}" -- 'kubectl get pods -A | (grep -i ems || true)' || true
          fi
        fi
      '''.stripIndent()
    }
    failure {
      echo 'Pipeline failed â€” see the EMS stage logs above for the first non-zero step.'
    }
  }
}
